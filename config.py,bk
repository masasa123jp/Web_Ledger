# app/__init__.py

"""
DOCSTRING: Flask application factory and initialization module.
Web Ledger Manager アプリケーションの初期化と各モジュールのインスタンス生成を行います。
"""

import os
import logging
from flask import Flask, jsonify
from flask_cors import CORS
from flask_session import Session  # 追加: Flask-Session をインポート
from .routes import register_routes

# ★ 追加: DBプールの初期化関数をインポート
from .db import init_db_pool

def create_app():
    # Flaskアプリケーションの作成（instanceフォルダ内の設定ファイルも利用）
    app = Flask(
        __name__,
        template_folder='templates',
        static_folder='static',
        instance_relative_config=True
    )

    # 秘密鍵の設定
    SECRET_KEY = os.environ.get("SECRET_KEY", "default-secret-key")
    if SECRET_KEY == "default-secret-key":
        app.logger.warning("WARNING: SECRET_KEY environment variable not set, using default secret key for development")
    app.secret_key = SECRET_KEY

    # CORSの有効化（クレデンシャル許可）
    CORS(app, supports_credentials=True)

    # サーバーサイドセッション設定（ここではファイルシステムを利用）
    app.config["SESSION_TYPE"] = "filesystem"  # 他に "redis" 等も利用可能
    app.config["SESSION_FILE_DIR"] = os.path.join(app.instance_path, "flask_session")
    app.config["SESSION_PERMANENT"] = False  # 必要に応じて設定変更
    Session(app)  # Flask-Session の初期化

    # 環境変数からDB接続情報を取得
    DB_NAME = os.environ.get("POSTGRES_DB", "web_ledger")
    DB_USER = os.environ.get("POSTGRES_USER", "mydbuser")
    DB_PASSWORD = os.environ.get("POSTGRES_PASSWORD", "mypassword")
    DB_HOST = os.environ.get("POSTGRES_HOST", "localhost")
    DB_PORT = os.environ.get("POSTGRES_PORT", "5432")

    # データベース接続パラメータの設定
    db_params = {
        'dbname': DB_NAME,
        'user': DB_USER,
        'password': DB_PASSWORD,
        'host': DB_HOST,
        'port': DB_PORT
    }

    # ★ 追加: コネクションプールを初期化
    # プールサイズは必要に応じて調整してください。
    # コネクションプール初期化時にスキーマも指定
    init_db_pool(minconn=1, maxconn=10, schema="web_ledger", **db_params)

    # 言語切替用の翻訳メッセージ（簡易的な例）
    translations = {
        "ja": {
            "app_name": "Web Ledger Manager",
            "login": "ログイン",
            "username": "ユーザー名",
            "password": "パスワード",
            "logout": "ログアウト",
            # 必要に応じて他の翻訳キーを追加
        },
        "en": {
            "app_name": "Web Ledger Manager",
            "login": "Login",
            "username": "Username",
            "password": "Password",
            "logout": "Logout",
            # 必要に応じて他の翻訳キーを追加
        }
    }

    @app.route('/api/translations/<lang>', methods=['GET'])
    def get_translations(lang):
        if lang in translations:
            return jsonify(translations[lang])
        return jsonify({"error": "Language not supported"}), 400

    # ★ 追加: データベースの初期化処理が必要ならここに追加
    # 例: init_database(app.config['DATABASE'])

    # 各APIエンドポイントの登録（既存機能）
    register_routes(app)

    # ★ 新機能 BluePrint の登録
    # レポートダッシュボード
    from report_dashboard.report_controller import report_bp
    app.register_blueprint(report_bp)
    # 生成AI連携
    from ai_integration.ai_analysis_controller import ai_bp
    app.register_blueprint(ai_bp)
    # 機械学習予測
    from ml_prediction.ml_prediction import ml_bp
    app.register_blueprint(ml_bp)
    # 非同期タスク（パフォーマンス最適化）
    from performance_optimization.async_task_controller import async_bp
    app.register_blueprint(async_bp)

    return app
